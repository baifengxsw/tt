package cn.itcast.erp.biz.impl;
import java.util.ArrayList;
import java.util.List;

import cn.itcast.erp.biz.IRoleBiz;
import cn.itcast.erp.dao.IMenuDao;
import cn.itcast.erp.dao.IRoleDao;
import cn.itcast.erp.entity.Emp;
import cn.itcast.erp.entity.Menu;
import cn.itcast.erp.entity.Role;
import cn.itcast.erp.entity.Tree;
import redis.clients.jedis.Jedis;
/**
 * 角色业务逻辑类
 * @author Administrator
 *
 */
public class RoleBiz extends BaseBiz<Role> implements IRoleBiz {

	private IRoleDao roleDao;
	private IMenuDao menuDao;
	private Jedis jedis;
	
	public Jedis getJedis() {
		return jedis;
	}

	public void setJedis(Jedis jedis) {
		this.jedis = jedis;
	}

	public void setMenuDao(IMenuDao menuDao) {
		this.menuDao = menuDao;
	}

	public void setRoleDao(IRoleDao roleDao) {
		this.roleDao = roleDao;
		super.setBaseDao(this.roleDao);
	}

	@Override
	public List<Tree> readRoleMenus(Long uuid) {
		List<Tree> treeList = new ArrayList<>();
		//获取角色的菜单
		Role role = roleDao.get(uuid);
		//获取角色菜单
		List<Menu> roleMenus = role.getMenus();
		
		Menu root = menuDao.get("0");
		Tree t1 = null;
		Tree t2 = null;
		for(Menu m :root.getMenus()) {
			t1 = new Tree();
			t1.setId(m.getMenuid());
			t1.setText(m.getMenuname());
			List<Tree> children = new ArrayList<>();
			for(Menu m1:m.getMenus()) {
				t2 = new Tree();
				t2.setId(m1.getMenuid());
				t2.setText(m1.getMenuname());
				//为什么这里不用重写 equals  缓冲器
				if(roleMenus.contains(m1)) {
					t2.setChecked(true);
				}
				children.add(t2);
			}
			t1.setChildren(children);
			treeList.add(t1);
		}
		return treeList;
	}
	
	/**
	 * 更新角色权限
	 * @param uuid 角色编号
	 * @param checkedStr 勾选选中菜单的ID字符串，以逗号分割
	 */
	public void updateRoleMenus(Long uuid,String checkedStr) {
		Role role = roleDao.get(uuid);
		//进入持久化状态
		role.setMenus(new ArrayList<Menu>());
		//清空之前所有的数据
		String [] ids = checkedStr.split(",");
		Menu menu = null;
		for(String id: ids) {
			menu = menuDao.get(id);
			role.getMenus().add(menu);
		}
		//1通过角色，反查询属于这个角色有哪些用户
		List<Emp> empList = role.getEmps();
		//2清除这些用户的菜单权限缓存
		try {
			for(Emp emp :empList) {
				//清除每个用户的菜单缓存
				jedis.del("menuList_"+emp.getUuid());
			}
		} catch (Exception e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
		
	}
	
}
